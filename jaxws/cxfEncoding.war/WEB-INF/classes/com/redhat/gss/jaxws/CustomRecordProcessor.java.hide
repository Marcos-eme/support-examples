/*
 * To the extent possible under law, Red Hat, Inc. has dedicated all copyright 
 * to this software to the public domain worldwide, pursuant to the CC0 Public 
 * Domain Dedication. This software is distributed without any warranty.  See 
 * <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

package com.redhat.gss.jaxws;

import javax.xml.ws.spi.Provider;
import org.jboss.logging.Logger;
import javax.naming.InitialContext;
import javax.annotation.PostConstruct;
import java.util.Iterator;
import org.jboss.ws.api.monitoring.RecordProcessor;
import org.jboss.ws.api.monitoring.Record;
import org.jboss.wsf.spi.deployment.Endpoint;
import org.jboss.wsf.spi.invocation.EndpointAssociation;
import org.jboss.ws.common.monitoring.AbstractRecordProcessor;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.List;
import java.util.Map;
import javax.xml.namespace.QName;
import java.util.ArrayList;

public class CustomRecordProcessor extends AbstractRecordProcessor
{
  private ThreadLocal<Date> date = new ThreadLocal<Date>();
  private static Map<QName, List<Long>> stats = new ConcurrentHashMap<QName, List<Long>>();
  private static Logger log = Logger.getLogger(CustomRecordProcessor.class);

  public CustomRecordProcessor()
  {
    super();
    recording=true;
  }

  public static Map<QName, List<Long>> getStats()
  {
    return stats;
  }

  public void processRecord(Record record)
  {
    if(record.getMessageType().equals(Record.MessageType.INBOUND))
    {
      date.set(record.getDate());
    }
    else
    {
      Date start = date.get();
      if(start != null)
      {
        date.remove();
        Date end = record.getDate();
        long elapsed = end.getTime() - start.getTime();
        log.info("Elapsed: " + elapsed + "ms");
        QName op = record.getOperation();
        List<Long> stat = stats.get(op);
        if(stat == null)
        {
          stat = new ArrayList<Long>();
          stats.put(op, stat);
        }
        stat.add(elapsed);
      }
    }
  }
}

